<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | CopyAndPaste]]></title>
  <link href="http://michaelay.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://michaelay.github.io/"/>
  <updated>2014-12-08T10:57:29-08:00</updated>
  <id>http://michaelay.github.io/</id>
  <author>
    <name><![CDATA[MichaelAY]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mocking Backtick in RSpec]]></title>
    <link href="http://michaelay.github.io/blog/2014/12/08/mocking-backtick-in-rspec/"/>
    <updated>2014-12-08T10:54:23-08:00</updated>
    <id>http://michaelay.github.io/blog/2014/12/08/mocking-backtick-in-rspec</id>
    <content type="html"><![CDATA[<p>`cmd` is a method in Kernel.
Simply mock the <code>Kernel</code> object.</p>

<pre><code class="ruby">Kernel.expects( :` ).with( 'unzip -d /tmp test.zip' )
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User-defined Metadata in Rspec]]></title>
    <link href="http://michaelay.github.io/blog/2014/12/05/user-defined-metadata-in-rspec/"/>
    <updated>2014-12-05T13:47:09-08:00</updated>
    <id>http://michaelay.github.io/blog/2014/12/05/user-defined-metadata-in-rspec</id>
    <content type="html"><![CDATA[<p>Rspec <code>describe</code>, <code>context</code> and <code>it</code> supports metadata in the form of a hash. Syntax as follow:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">some</span> <span class="n">description</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:bar</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;context &quot;when some condition&quot;, :value =&amp;gt; true do </span>
</span><span class='line'>
</span><span class='line'><span class="sr">    it &quot;does something&quot;, :hihi, :day =&amp;gt; 10 do |example| </span>
</span><span class='line'><span class="sr">        expect(exapmle.metadata[:foo]).to eq(1) </span>
</span><span class='line'><span class="sr">        expect(example.metadata[:value]).to be true</span>
</span><span class='line'><span class="sr">        expect(example.metadata[:hihi]).to be true </span>
</span><span class='line'><span class="sr">        expect(example.metadata[:day]).to eq(10) </span>
</span><span class='line'><span class="sr">    end </span>
</span><span class='line'>
</span><span class='line'><span class="sr">end </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure>
There are 2 ways that I use metadata in RSpec.</p>

<h3>To include shared_examples / shared_context</h3>

<p>RSpec includes shared_context and shared_examples with same metadata
<code>ruby
RSpec.shared_context "shared stuff", :a =&gt; :b do
    def shared_method
        pp "hello"
    end
end
</code>
<code>ruby
Rspec.describe "use shared stuff", :a =&gt; :b do
end
</code>
is equivalent to
<code>ruby
Rspec.describe "use shared stuff" do
    include_context "shared_stuff"
end
</code></p>

<h3>Use metadata as variables</h3>

<pre><code class="ruby ">RSpec.describe "use metadata as var", :num_elements =&gt; 7 do 

    let(:elements) do |example|
        (1..example.metadata[:num_elements]).map { |n| "element#{n}" }
    end 

    it "prints elements" do 
        pp elements 
    end 

end 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec Guide]]></title>
    <link href="http://michaelay.github.io/blog/2014/12/02/rspec-guide/"/>
    <updated>2014-12-02T10:47:00-08:00</updated>
    <id>http://michaelay.github.io/blog/2014/12/02/rspec-guide</id>
    <content type="html"><![CDATA[<p>A good guide for writing rspec</p>

<p><a href="http://betterspecs.org/">BetterSpecs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Enumerator Inject]]></title>
    <link href="http://michaelay.github.io/blog/2014/11/27/ruby-inject/"/>
    <updated>2014-11-27T14:54:56-08:00</updated>
    <id>http://michaelay.github.io/blog/2014/11/27/ruby-inject</id>
    <content type="html"><![CDATA[<p>Loop over enumerator with a seed, takes output from last round as input.</p>

<p>eg.</p>

<p>array to hash</p>

<p><div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">array</span> <span class="o">=</span> <span class="o">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="o">]</span>
<span class="nb">hash</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="n">n</span><span class="o">|</span>
  <span class="n">memo</span><span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">key</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="n">n</span><span class="o">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">value</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="n">n</span>
<span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;h1&gt;hash: { &amp;ldquo;key 1&amp;rdquo; =&gt; &amp;ldquo;value 1&amp;rdquo;, &amp;ldquo;key 2&amp;rdquo; =&gt; &amp;ldquo;value 2&amp;rdquo;, &amp;ldquo;key 3&amp;rdquo; =&gt; &amp;ldquo;value 3&amp;rdquo; }&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span></code></pre></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Auto Revivifying Hash]]></title>
    <link href="http://michaelay.github.io/blog/2014/11/26/ruby-auto-revivifying-hash/"/>
    <updated>2014-11-26T08:34:56-08:00</updated>
    <id>http://michaelay.github.io/blog/2014/11/26/ruby-auto-revivifying-hash</id>
    <content type="html"><![CDATA[<p>Hash auto revivification allows you to create content on the fly when accessing undefined hash element.
Comes in handy when you need to build a nested hash</p>

<p><div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="n">h</span><span class="p">,</span><span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">h</span><span class="o">.</span><span class="n">default_proc</span><span class="p">)</span> <span class="p">}</span>
<span class="nb">hash</span><span class="o">[&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">][&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nb">hash</span><span class="o">[&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">][&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nb">hash</span><span class="o">[&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">][&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nb">puts</span> <span class="nb">hash</span><span class="o">.</span><span class="n">inspect</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;h1&gt;&amp;ldquo;{&quot;a&amp;rdquo;=&gt;{&amp;ldquo;b&amp;rdquo;=&gt;1, &amp;ldquo;c&amp;rdquo;=&gt;1}, &amp;ldquo;b&amp;rdquo;=&gt;{&amp;ldquo;c&amp;rdquo;=&gt;1}}&quot;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span></code></pre></div></p>
]]></content>
  </entry>
  
</feed>
